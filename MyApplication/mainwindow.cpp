#include "mainwindow.h"
#include "./ui_mainwindow.h"
#include "QMessageBox"
#include <QInputDialog>
#include <QRandomGenerator>
#include "secondwindow.h"
#include "QJsonObject"
#include "QJsonDocument"
#include "QtNetwork/QNetworkAccessManager"
#include "QtNetwork/QNetworkReply"
#include <QtNetwork/QNetworkRequest>
#include <QDebug>
#include <QTimer>
#include "commonutils.h"

int count =0;

MainWindow::MainWindow(QStackedWidget *stackedWidget, QWidget *parent)
    : QMainWindow(parent),
    ui(new Ui::MainWindow),
    stackedWidget(stackedWidget)
{
    ui->setupUi(this);
    ui->radioButton->setChecked(false);
    MainWindow::on_radioButton_clicked();

    loadingOverlay = new QWidget(this);
    loadingOverlay->setStyleSheet("background-color: rgba(0, 0, 0, 180);");
    loadingOverlay->setGeometry(this->rect());
    loadingOverlay->setFocusPolicy(Qt::StrongFocus);
    loadingOverlay->setAttribute(Qt::WA_NoSystemBackground, true);
    loadingOverlay->setAttribute(Qt::WA_TransparentForMouseEvents, false);
    loadingOverlay->setWindowModality(Qt::ApplicationModal);
    loadingOverlay->show();

    QLabel *loadingLabel = new QLabel("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...", loadingOverlay);
    loadingLabel->setStyleSheet("color: white; font-size: 16px; font-weight: bold;");
    loadingLabel->setAlignment(Qt::AlignCenter);
    loadingLabel->setGeometry(0, 0, loadingOverlay->width(), loadingOverlay->height());
    loadingLabel->show();


    QString machineUUID = CommonUtils::getMachineUUID().trimmed().toUpper();

    if (machineUUID == "unknown_uuid")
    {
        loadingOverlay->close();
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!");
        QTimer::singleShot(100, qApp, &QCoreApplication::quit);
        return;
    }

    // –≥–æ—Ç–æ–≤–∏–º JSON
    QJsonObject json;
    json["machine_id"] = machineUUID;
    QByteArray data = QJsonDocument(json).toJson();

    // —Å–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –¥–µ–ª–∞–µ–º POST
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("http://localhost:6666/identification"));
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply *reply = manager->post(request, data);

    connect(reply, &QNetworkReply::finished, this, [this, reply]()
    {
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        loadingOverlay->close();
        loadingOverlay->deleteLater();

        if (reply->error() == QNetworkReply::NoError)
        {
            QMessageBox::information(this, "–£—Å–ø–µ—Ö", "–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –µ—Å—Ç—å –≤ –±–∞–∑–µ.");
        }
        else
        {
            QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–í–∞—à–µ–π –º–∞—à–∏–Ω—ã –Ω–µ—Ç –≤ –±–∞–∑–µ:\n" + reply->errorString());
            QTimer::singleShot(100, qApp, &QCoreApplication::quit);
        }

        reply->deleteLater();
    });
}


MainWindow::~MainWindow()
{
    delete ui;
}


void MainWindow::resizeEvent(QResizeEvent *event)
{
    QMainWindow::resizeEvent(event);

    if (loadingOverlay)
    {
        loadingOverlay->setGeometry(this->rect()); // —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å MainWindow
        // –µ—Å–ª–∏ –µ—Å—Ç—å label –≤–Ω—É—Ç—Ä–∏, –º–æ–∂–Ω–æ —Ç–æ–∂–µ —Ä–∞—Å—Ç—è–Ω—É—Ç—å
        if (auto label = loadingOverlay->findChild<QLabel*>())
        {
            label->setGeometry(0, 0, loadingOverlay->width(), loadingOverlay->height());
        }
    }
}



void MainWindow::on_pushButton_clicked()
{
    QString machineUUID = CommonUtils::getMachineUUID();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    if (machineUUID == "unknown_uuid")
    {
        QMessageBox::critical(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!");
        return;
    }
    QString login = ui->login->text();
    QString password = ui->password->text();
    QString phone = ui->phone->text();
    QString email = ui->email->text();
    QString adress = ui->adress->text();
    if (login.length() != 4 || password.length() != 6)
    {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4 —Å–∏–º–≤–æ–ª–∞ –∞ –ü–∞—Ä–æ–ª—å 6 —Å–∏–º–≤–æ–ª–æ–≤");
        count = count + 1;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –∫–∞–ø—á—É
        if (CommonUtils::showCaptcha(this, count))
        {
            count = 0;
            return;
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8)
    QRegularExpression phoneRegex("^[78][0-9]{10}$");
    if (!phoneRegex.match(phone).hasMatch())
    {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                             "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω:\n"
                             "- –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä\n"
                             "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7 –∏–ª–∏ 8\n"
                             "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @ –∏ —Ç–æ—á–∫—É, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 6 —Å–∏–º–≤–æ–ª–æ–≤)
    if (email.length() < 6 || !email.contains('@') || !email.contains('.') || email.indexOf('@') < 1)
    {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@domain.com –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)
        if (adress.length() < 5)
    {
        QMessageBox::warning(this, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤");
        return;
    }

    // –°–æ–∑–¥–∞—ë–º JSON –æ–±—ä–µ–∫—Ç
    QJsonObject json;
    json["username"] = login;
    json["password"] = password;
    json["email"] = email;
    json["phone"] = phone;
    json["adress"] = adress;
    json["machine_id"] = machineUUID;
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤ QByteArray
    QJsonDocument doc(json);
    QByteArray data = doc.toJson();

    // –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–ø—Ä–æ—Å
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("http://localhost:6666/register"));
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
    QNetworkReply *reply = manager->post(request, data);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    connect(reply, &QNetworkReply::finished, [reply, this]()
    {

        if(reply->error() == QNetworkReply::NoError)
        {
            QByteArray response = reply->readAll();
            QMessageBox::information(this, "–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
            stackedWidget->setCurrentIndex(2);
        }
        else
        {
            QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö");
        }
        reply->deleteLater();
    });
}

void MainWindow::on_pushButton_2_clicked()  // –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏"
{
    if (stackedWidget)
    {
        stackedWidget->setCurrentIndex(1);  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    }
}

void MainWindow::on_radioButton_clicked()
{
    if (ui->radioButton->isChecked())
    {
        this->setStyleSheet(CommonUtils::getDarkTheme("#MainWindow"));
    }
    else
    {
        this->setStyleSheet(CommonUtils::getLightTheme("#MainWindow"));
    }
}


